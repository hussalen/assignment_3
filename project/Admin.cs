using System;
using System.Text.Json.Nodes;

namespace assignment_3
{
    public class Admin : Person
    {
        private static int nextId = 1;

        public int AdminID { get; private set; }

        private List<Report> _reports;
        private List<Report> Reports
        {
            get => _reports = _reports = new(_reports);
            set => _reports = value;
        }

        private List<Timeslot> _timeSlots;

        public List<Timeslot> Timeslots
        {
            get => new(_timeSlots);
            private set => _timeSlots = value;
        }

        private static List<Admin> _adminsList = new();

        public static List<Admin> GetAdminsExtent() => new List<Admin>(_adminsList);

        public Admin(string name, string email, string[] addressLines, string password)
            : base(name, email, addressLines, password)
        {
            AdminID = Interlocked.Increment(ref nextId);
            Reports = new();
            AddAdmin(this);
        }

        public Admin(Person person)
            : base(
                person.Name,
                person.Email.Address.ToString(),
                person.AddressLines,
                person.Password
            )
        {
            AdminID = Interlocked.Increment(ref nextId);
            _reports = new();
            AddAdmin(this);
        }

        public void CreateSchedule(DateTime date, TimeSpan startTime, TimeSpan endTime)
        {
            if (date < DateTime.Now.Date)
                throw new ArgumentException("Schedule date cannot be in the past.");
            if (startTime >= endTime)
                throw new ArgumentException("Start time must be earlier than end time.");

            Console.WriteLine(
                $"Schedule created by Admin {Name}: {date.ToShortDateString()}, {startTime} - {endTime}"
            );
        }

        public void UpdateSchedule(
            int scheduleId,
            DateTime date,
            TimeSpan startTime,
            TimeSpan endTime
        )
        {
            if (scheduleId <= 0)
                throw new ArgumentException("Schedule ID must be a positive integer.");
            if (date < DateTime.Now.Date)
                throw new ArgumentException("Schedule date cannot be in the past.");
            if (startTime >= endTime)
                throw new ArgumentException("Start time must be earlier than end time.");

            Console.WriteLine(
                $"Schedule ID {scheduleId} updated by Admin {Name}: {date.ToShortDateString()}, {startTime} - {endTime}"
            );
        }

        public void DeleteSchedule(int scheduleId)
        {
            if (scheduleId <= 0)
                throw new ArgumentException("Schedule ID must be a positive integer.");

            Console.WriteLine($"Schedule ID {scheduleId} deleted by Admin {Name}");
        }

        private Report GenerateReport(string title, JsonArray content)
        {
            if (string.IsNullOrWhiteSpace(title))
                throw new ArgumentException("Report title cannot be null or empty.");

            var report = new Report(this, content);
            Reports.Add(report);
            Console.WriteLine(
                $"Report generated by Admin {Name}: {report.Content}, ID {report.ReportId}"
            );
            return report;
        }

        private void RemoveReport(Report report)
        {
            if (!Reports.Remove(report))
                throw new ArgumentException("Report not found");
        }

        public void ResetAdmin()
        {
            RemoveAdmin(this);

            ArgumentNullException.ThrowIfNull(_reports);
            _reports.Clear();
            _timeSlots.Clear();
        }

        private void AddAdmin(Admin admin)
        {
            if (admin == null)
            {
                throw new ArgumentException($"{nameof(admin)} cannot be null.");
            }

            _adminsList ??= new();

            if (_adminsList.Contains(admin))
            {
                throw new ArgumentException($"A admin with ID {admin.AdminID} already exists.");
            }

            _adminsList.Add(admin);
        }

        private void RemoveAdmin(Admin admin)
        {
            ArgumentNullException.ThrowIfNull(_adminsList);

            if (!_adminsList.Contains(admin))
            {
                throw new ArgumentException($"An admin with ID {admin.AdminID} does not exist.");
            }
            _adminsList.Remove(admin);
        }

        public void AddTimeslot(Timeslot timeslot)
        {
            if (timeslot == null)
                throw new ArgumentNullException(nameof(timeslot));

            if (timeslot.Admins.Contains(this) || _timeSlots.Contains(timeslot))
            {
                return;
            }

            _timeSlots.Add(timeslot);
            timeslot.AddAdmin(this);
        }

        public void RemoveTimeslot(Timeslot timeslot)
        {
            if (timeslot == null)
                throw new ArgumentNullException(nameof(timeslot));

            if (!timeslot.Admins.Contains(this) || !_timeSlots.Contains(timeslot))
            {
                return;
            }

            if (_timeSlots.Contains(timeslot))
            {
                _timeSlots.Remove(timeslot);
                timeslot.RemoveAdmin(this);
            }
        }

        private class Report
        {
            public int ReportId { get; private set; }
            private static int nextId = 1;

            private JsonArray? _content;
            public JsonArray? Content
            {
                get => _content;
                set
                {
                    if (value is not null && value.Count == 0)
                    {
                        throw new ArgumentException("Content cannot be an empty JsonArray.");
                    }
                    _content = value;
                }
            }

            private static List<Report> _reportList = new();

            Admin Admin { get; init; }

            internal Report(Admin admin, JsonArray content)
            {
                ReportId = Interlocked.Increment(ref nextId);
                Content = content;
                Admin = admin;
                AddReport(this);
                //SaveManager.SaveToJson(_reportList, nameof(_reportList));
            }

            public void GenerateReport()
            {
                if (Content is null)
                {
                    throw new InvalidOperationException(
                        "Cannot generate a report without content."
                    );
                }
                Console.WriteLine($"Report {ReportId} generated with content: {Content}");
            }

            private static void AddReport(Report report)
            {
                if (report is null)
                {
                    throw new ArgumentException($"{nameof(report)} cannot be null.");
                }
                _reportList.Add(report);
            }

            public static List<Report> GetReportExtent() => new(_reportList);
        }
    }
}
