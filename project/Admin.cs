using System;
using System.Text.Json.Nodes;

namespace assignment_3
{
    public class Admin
    {
        private static int nextId = 1;

        public int AdminID { get; private set; }

        private string _name;
        public string Name
        {
            get => _name;
            set
            {
                if (string.IsNullOrWhiteSpace(value))
                    throw new ArgumentException("Name cannot be null or empty.");
                _name = value;
            }
        }

        private List<Report> _reports;
        public List<Report> Reports
        {
            get => _reports = _reports = new(_reports);
            private set => _reports = value;
        }

        public Admin(string name)
        {
            if (string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Admin name cannot be null or empty.");

            AdminID = Interlocked.Increment(ref nextId);
            Reports = new();
            Name = name;
        }

        public void CreateSchedule(DateTime date, TimeSpan startTime, TimeSpan endTime)
        {
            if (date < DateTime.Now.Date)
                throw new ArgumentException("Schedule date cannot be in the past.");
            if (startTime >= endTime)
                throw new ArgumentException("Start time must be earlier than end time.");

            Console.WriteLine(
                $"Schedule created by Admin {Name}: {date.ToShortDateString()}, {startTime} - {endTime}"
            );
        }

        public void UpdateSchedule(
            int scheduleId,
            DateTime date,
            TimeSpan startTime,
            TimeSpan endTime
        )
        {
            if (scheduleId <= 0)
                throw new ArgumentException("Schedule ID must be a positive integer.");
            if (date < DateTime.Now.Date)
                throw new ArgumentException("Schedule date cannot be in the past.");
            if (startTime >= endTime)
                throw new ArgumentException("Start time must be earlier than end time.");

            Console.WriteLine(
                $"Schedule ID {scheduleId} updated by Admin {Name}: {date.ToShortDateString()}, {startTime} - {endTime}"
            );
        }

        public void DeleteSchedule(int scheduleId)
        {
            if (scheduleId <= 0)
                throw new ArgumentException("Schedule ID must be a positive integer.");

            Console.WriteLine($"Schedule ID {scheduleId} deleted by Admin {Name}");
        }

        public Report GenerateReport(string title, JsonArray content)
        {
            if (string.IsNullOrWhiteSpace(title))
                throw new ArgumentException("Report title cannot be null or empty.");

            var report = new Report(this, content);
            Reports.Add(report);
            Console.WriteLine(
                $"Report generated by Admin {Name}: {report.Content}, ID {report.ReportId}"
            );
            return report;
        }

        public void RemoveReport(Report report)
        {
            if (!Reports.Remove(report))
                throw new ArgumentException("Report not found");
        }

        public class Report
        {
            public int ReportId { get; private set; }
            private static int nextId = 1;

            private JsonArray? _content;
            public JsonArray? Content
            {
                get => _content;
                set
                {
                    if (value is not null && value.Count == 0)
                    {
                        throw new ArgumentException("Content cannot be an empty JsonArray.");
                    }
                    _content = value;
                }
            }

            private static List<Report> _reportList = new();

            Admin Admin { get; init; }

            internal Report(Admin admin, JsonArray content)
            {
                ReportId = Interlocked.Increment(ref nextId);
                Content = content;
                Admin = admin;
                AddReport(this);
                SaveManager.SaveToJson(_reportList, nameof(_reportList));
            }

            public void GenerateReport()
            {
                if (Content is null)
                {
                    throw new InvalidOperationException(
                        "Cannot generate a report without content."
                    );
                }
                Console.WriteLine($"Report {ReportId} generated with content: {Content}");
            }

            private static void AddReport(Report report)
            {
                if (report is null)
                {
                    throw new ArgumentException($"{nameof(report)} cannot be null.");
                }
                _reportList.Add(report);
            }

            public static List<Report> GetReportExtent() => new(_reportList);
        }
    }
}
